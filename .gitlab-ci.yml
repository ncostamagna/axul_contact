image: golang:1.16

stages:
  - download
  - test
  - publish

after_script:
  - cp -R $GOPATH ./_GO || :

before_script:
  - cp -R _GO $GOPATH

.install_tempate: &install
  before_script:
    - export GOSUMDB=off
    - export GO111MODULE=on

download:
  <<: *install
  stage: download
  cache:
    paths:
      - .cache
  script:
    - go get -d ./...


unit-test-job: # This job runs in the test stage.
  <<: *install
  stage: test
  cache:
    paths:
      - .cache
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - go test ./... -v -covermode=atomic -coverpkg=./... -count=1 -race
    - echo "No test issues found."

lint-test-job: # This job also runs in the test stage.
  <<: *install
  stage: test
  cache:
    paths:
      - .cache
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.31.0
    - $GOPATH/bin/golangci-lint run ./...
    - echo "No lint issues found."

coverage-test-job: # This job runs in the test stage.
  <<: *install
  stage: test
  cache:
    paths:
      - .cache
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - go test ./... -covermode=atomic -coverpkg=./... -cover -coverprofile=c.out -count=1 -race
    - go tool cover -html=c.out -o coverage.html
    - go test ./... -v -bench=. > bench.log
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.31.0
    - $GOPATH/bin/golangci-lint run ./...
  artifacts:
    paths:
      - coverage.html
      - bench.log

publish:
  <<: *install
  stage: publish
  cache:
    paths:
      - .cache
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info | grep Registry
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"